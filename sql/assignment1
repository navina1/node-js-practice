-- Create CITIES table
CREATE TABLE CITIES (
    CITY CHAR(20),
    STATE CHAR(20),
    PRIMARY KEY (CITY, STATE)
);

-- Create WAREHOUSES table
CREATE TABLE WAREHOUSES (
    WID INTEGER PRIMARY KEY,
    WNAME CHAR(30),
    LOCATION CHAR(20),
    EXTRA_CONTEXT JSON,
    CITY CHAR(20),
    STATE CHAR(20),
    FOREIGN KEY (CITY, STATE) REFERENCES CITIES(CITY, STATE)
);

-- Create STORES table
CREATE TABLE STORES (
    SID INTEGER PRIMARY KEY,
    STORE_NAME CHAR(20),
    LOCATION_CITY CHAR(20),
    CITY CHAR(20),
    STATE CHAR(20),
    FOREIGN KEY (CITY, STATE) REFERENCES CITIES(CITY, STATE)
);

-- Create CUSTOMER table
CREATE TABLE CUSTOMER (
    CNO INTEGER PRIMARY KEY,
    CNAME CHAR(50),
    ADDR VARCHAR(50),
    CU_CITY CHAR(20),
    CITY CHAR(20),
    STATE CHAR(20),
    FOREIGN KEY (CITY, STATE) REFERENCES CITIES(CITY, STATE)
);

-- Create ORDERS table
CREATE TABLE ORDERS (
    ONO INT PRIMARY KEY,
    ODATE DATE,
    CNO INTEGER,
    FOREIGN KEY (CNO) REFERENCES CUSTOMER(CNO)
);

-- Create ITEMS table
CREATE TABLE ITEMS (
    ITEMNO INTEGER PRIMARY KEY,
    DESCRIPTION TEXT,
    WEIGHT DECIMAL(5,2),
    COST DECIMAL(5,2)
);

-- Create ORDER_ITEMS table for Many-to-Many relationship between ITEMS and ORDERS
CREATE TABLE ORDER_ITEMS (
    ONO INT,
    ITEMNO INTEGER,
    ORDERED_QUANTITY INTEGER,
    FOREIGN KEY (ONO) REFERENCES ORDERS(ONO),
    FOREIGN KEY (ITEMNO) REFERENCES ITEMS(ITEMNO),
    PRIMARY KEY (ONO, ITEMNO)
);

-- Create STORE_ITEMS table for Many-to-Many relationship between STORES and ITEMS
CREATE TABLE STORE_ITEMS (
    SID INTEGER,
    ITEMNO INTEGER,
    QUANTITY INTEGER,
    FOREIGN KEY (SID) REFERENCES STORES(SID),
    FOREIGN KEY (ITEMNO) REFERENCES ITEMS(ITEMNO),
    PRIMARY KEY (SID, ITEMNO)
);


-- Query 1: Find the item that has the minimum weight.
SELECT * FROM ITEMS WHERE WEIGHT = (SELECT MIN(WEIGHT) FROM ITEMS);

-- Query 2: Find the different warehouses in "Pune".
SELECT DISTINCT WNAME FROM WAREHOUSES WHERE LOCATION = 'Pune';

-- Query 3: Find the details of items ordered by a customer named "Mr. Patil".
SELECT I.*
FROM ITEMS I 
INNER JOIN ORDER_ITEMS OI ON I.ITEMNO = OI.ITEMNO
INNER JOIN ORDERS O ON OI.ONO = O.ONO
INNER JOIN CUSTOMER C ON O.CNO = C.CNO
WHERE C.CNAME = 'Mr. Patil';

-- Query 4: Find a Warehouse that has the maximum number of stores.
SELECT WID, WNAME, COUNT(*) AS STORE_COUNT
FROM WAREHOUSES
GROUP BY WID, WNAME
ORDER BY STORE_COUNT DESC
LIMIT 1;

-- Query 5: Find an item that is ordered for a minimum number of times.
SELECT I.*, COUNT(ITEMNO) AS ORDER_COUNT
FROM ITEMS I
INNER JOIN ORDER_ITEMS OI ON I.ITEMNO = OI.ITEMNO
GROUP BY I.ITEMNO
ORDER BY ORDER_COUNT ASC
LIMIT 1;

-- Query 6: Find the detailed orders given by each customer.
SELECT C.CNO, C.CNAME, O.*
FROM CUSTOMER C
INNER JOIN ORDERS O ON C.CNO = O.CNO;
